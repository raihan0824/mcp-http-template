apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  namespace: mcp-server
  labels:
    app.kubernetes.io/name: mcp-server
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mcp-server
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mcp-server
        app.kubernetes.io/component: server
      annotations:
        prometheus.io/scrape: "false"
    spec:
      # serviceAccountName: mcp-server  # Using default service account
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: mcp-server
        image: mcp-http-template:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: MCP_SERVER_NAME
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: server-name
        - name: MCP_HOST
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: host
        - name: MCP_PORT
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: port
        - name: MCP_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: log-level
        - name: MCP_ENABLE_TOOLS
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: enable-tools
        - name: MCP_ENABLE_RESOURCES
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: enable-resources
        - name: MCP_ENABLE_PROMPTS
          valueFrom:
            configMapKeyRef:
              name: mcp-server-config
              key: enable-prompts
        livenessProbe:
          httpGet:
            path: /mcp/
            port: http
            httpHeaders:
            - name: Accept
              value: "application/json, text/event-stream"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /mcp/
            port: http
            httpHeaders:
            - name: Accept
              value: "application/json, text/event-stream"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
